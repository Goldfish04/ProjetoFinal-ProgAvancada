import tkinter as tk
from tkinter import ttk
import cv2
from PIL import Image, ImageTk
import os
import time
import numpy as np
import face_recognition
from datetime import datetime

# Criar o diretório para armazenar as imagens capturadas
if not os.path.exists("ImagesBasic"):
    os.makedirs("ImagesBasic")


# Função para capturar a imagem
def capture_image():
    # Criar uma janela para inserir o nome do usuário
    name_window = tk.Toplevel(root)
    name_window.title("Nome do Novo Usuário")

    # Label e Entry para inserir o nome do usuário
    name_label = ttk.Label(name_window, text="Nome do Usuário:")
    name_label.grid(row=0, column=0, padx=5, pady=5)
    name_entry = ttk.Entry(name_window)
    name_entry.grid(row=0, column=1, padx=5, pady=5)

    # Função para salvar a imagem com o nome do usuário
    def save_image_with_name():
        name = name_entry.get().strip()
        if name:
            ret, frame = cap.read()
            if ret:
                timestamp = time.strftime("%Y%m%d%H%M%S")
                image_path = os.path.join("ImagesBasic", f"{name}_{timestamp}.jpg")
                cv2.imwrite(image_path, frame)
                print(f"Imagem capturada e salva como: {image_path}")
                name_window.destroy()
            else:
                print("Erro ao capturar imagem.")
        else:
            print("Por favor, insira um nome válido.")

    # Botão para confirmar o nome do usuário e salvar a imagem
    save_button = ttk.Button(name_window, text="Salvar", command=save_image_with_name)
    save_button.grid(row=1, column=0, columnspan=2, padx=5, pady=5)

    # Manter a janela de captura principal em espera
    root.wait_window(name_window)


def recognize_faces():
    # Path to the folder containing images
    path = 'ImagesBasic'
    images = []
    classNames = []
    myList = os.listdir(path)
    print(myList)
    for cl in myList:
        curImg = cv2.imread(f'{path}/{cl}')
        images.append(curImg)
        classNames.append(os.path.splitext(cl)[0])
    print(classNames)

    def findEncodings(images):
        encodeList = []
        for img in images:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            encode = face_recognition.face_encodings(img)[0]
            encodeList.append(encode)
        return encodeList

    def markAttendance(name):
        with open('Attendance.csv', 'r+') as f:
            myDataList = f.readlines()
            nameList = []
            for line in myDataList:
                entry = line.split(',')
                nameList.append(entry[0])
            if name not in nameList:
                now = datetime.now()
                dtString = now.strftime('%H:%M:%S')
                f.writelines(f'\n{name},{dtString}')

    encodeListKnown = findEncodings(images)
    print('Encoding Complete')

    cap = cv2.VideoCapture(0)

    while True:
        success, img = cap.read()
        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

        facesCurFrame = face_recognition.face_locations(imgS)
        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

        for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
            matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
            faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
            matchIndex = np.argmin(faceDis)

            if matches[matchIndex]:
                name = classNames[matchIndex].upper()
                print(name)
                y1, x2, y2, x1 = faceLoc
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
                markAttendance(name)

        cv2.imshow('Webcam', img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


# Função para abrir a janela da agenda
def open_agenda():
    agenda_window = tk.Toplevel(root)
    agenda_window.title("Agenda")

    # Lista de meses
    meses = [
        "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
    ]

    # Lista de horas
    horas = [f"{h:02d}:00" for h in range(24)]

    # Função para adicionar compromisso
    def add_appointment():
        dia = day_combobox.get()
        mes = month_combobox.get()
        hora = hour_combobox.get()
        compromisso = appointment_entry.get()
        if dia and mes and hora and compromisso:
            appointment = f"{dia} de {mes} às {hora}: {compromisso}"
            appointments_listbox.insert(tk.END, appointment)
            appointment_entry.delete(0, tk.END)
            sort_appointments()

    # Função para ordenar compromissos
    def sort_appointments():
        appointments = list(appointments_listbox.get(0, tk.END))
        appointments.sort(key=lambda x: (meses.index(x.split()[2]), int(x.split()[0]), x.split()[4]))
        appointments_listbox.delete(0, tk.END)
        for appointment in appointments:
            appointments_listbox.insert(tk.END, appointment)

    # Seleção de dia
    tk.Label(agenda_window, text="Dia:").pack(pady=5)
    day_combobox = ttk.Combobox(agenda_window, values=list(range(1, 32)), width=5)
    day_combobox.pack(pady=5)

    # Seleção de mês
    tk.Label(agenda_window, text="Mês:").pack(pady=5)
    month_combobox = ttk.Combobox(agenda_window, values=meses)
    month_combobox.pack(pady=5)

    # Seleção de hora
    tk.Label(agenda_window, text="Hora:").pack(pady=5)
    hour_combobox = ttk.Combobox(agenda_window, values=horas)
    hour_combobox.pack(pady=5)

    # Entrada para novos compromissos
    tk.Label(agenda_window, text="Compromisso:").pack(pady=5)
    appointment_entry = tk.Entry(agenda_window, width=40)
    appointment_entry.pack(pady=5)

    # Botão para adicionar compromisso
    add_appointment_button = tk.Button(agenda_window, text="Adicionar Compromisso", command=add_appointment)
    add_appointment_button.pack(pady=5)

    # Lista de compromissos
    appointments_listbox = tk.Listbox(agenda_window, width=50, height=10)
    appointments_listbox.pack(pady=10)


# Criar a janela principal
root = tk.Tk()
root.title("Menu Principal")

# Criar o frame para os botões
menu_frame = tk.Frame(root)
menu_frame.pack(pady=20)

# Botão para capturar imagem
capture_button = tk.Button(menu_frame, text="Novo Usuário", command=capture_image)
capture_button.grid(row=0, column=0, padx=10, pady=10)

# Botão para adicionar usuário
add_user_button = tk.Button(menu_frame, text="Reconhecer Usuário", command=recognize_faces)
add_user_button.grid(row=0, column=1, padx=10, pady=10)

# Botão para abrir a agenda
agenda_button = tk.Button(menu_frame, text="Agenda", command=open_agenda)
agenda_button.grid(row=0, column=2, padx=10, pady=10)

# Iniciar a captura de vídeo
cap = cv2.VideoCapture(0)

# Iniciar o loop principal da interface gráfica
root.mainloop()

# Liberar a captura de vídeo quando a janela for fechada
cap.release()
cv2.destroyAllWindows()

